import os
import csv
import json
import pytz
import psycopg2
from io import StringIO
from datetime import datetime, timedelta

from dotenv import load_dotenv
from flask import (
    Flask, request, Response, render_template_string,
    send_from_directory, url_for
)

# --- Configuration ---
dotenv_path = os.path.join(os.path.dirname(__file__), '.postgres.env')
load_dotenv(dotenv_path=dotenv_path)

DB_NAME = os.getenv("POSTGRES_DB")
DB_USER = os.getenv("POSTGRES_USER")
DB_PASS = os.getenv("POSTGRES_PASSWORD")
DB_HOST = os.getenv("POSTGRES_HOST")
DB_PORT = os.getenv("POSTGRES_PORT")

TARGET_TZ = pytz.timezone(os.getenv("APP_TIMEZONE", "America/Chicago"))
UI_MAX_WIDTH = os.getenv("UI_MAX_WIDTH", "1100px")  # Keep pages narrower by default

# --- Flask App ---
app = Flask(__name__)

# Prefer /gemma_logs, fallback to /logs
PRIMARY_LOGS_DIR = os.path.join(app.root_path, 'gemma_logs')
SECONDARY_LOGS_DIR = os.path.join(app.root_path, 'logs')
LOGS_DIR = PRIMARY_LOGS_DIR if os.path.isdir(PRIMARY_LOGS_DIR) else SECONDARY_LOGS_DIR


# --- Helpers ---
def get_db_connection():
    try:
        return psycopg2.connect(
            dbname=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT
        )
    except psycopg2.OperationalError as e:
        print(f"Database connection failed: {e}")
        return None

def convert_to_local_time(dt):
    if dt and isinstance(dt, datetime):
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=pytz.utc)
        return dt.astimezone(TARGET_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')
    return dt

def badge(text, color="#6c757d"):
    return f'<span class="badge" style="background:{color};">{text}</span>'

def bool_badge(val):
    if val is True:
        return badge("âœ“", "#28a745")
    if val is False:
        return badge("âœ—", "#dc3545")
    return badge("â€”", "#6c757d")

def status_badge(s):
    return {
        "completed": badge("completed", "#28a745"),
        "failed":    badge("failed", "#dc3545"),
        "running":   badge("running", "#ffc107"),
        "queued":    badge("queued", "#6c757d"),
    }.get(s, badge(s or "â€”"))

def safe_pre(text):
    if text is None: return ""
    # Very light escaping to avoid accidental HTML injection.
    t = (text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;"))
    return f"<pre>{t}</pre>"

# --- Base Template (centered, narrower, with dark mode + JS helpers) ---
HTML_BASE = """
<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
<meta charset="UTF-8">
<title>Gemini Agent - {{ title }}</title>
{% if refresh_seconds %}<meta http-equiv="refresh" content="{{ refresh_seconds }}">{% endif %}
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
:root {
  --bg: #f7f7fb;
  --card: #fff;
  --text: #222;
  --muted: #666;
  --accent: #2979ff;
  --border: #eaeaea;
}
[data-theme="dark"] {
  --bg: #0f1115;
  --card: #171a21;
  --text: #e6e6e6;
  --muted: #aaa;
  --accent: #4c8dff;
  --border: #2a2f3a;
}
body { font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif;
       background:var(--bg); color:var(--text); margin:0; }
nav { background:#222; display:flex; gap:.5rem; padding:.65rem 1rem; position:sticky; top:0; z-index:10; }
nav a { color:#fff; text-decoration:none; font-weight:600; padding:.4rem .6rem; border-radius:.4rem; }
nav a.active, nav a:hover { background:#444; }
.nav-right { margin-left:auto; display:flex; gap:.5rem; align-items:center; }
.container { max-width: """ + UI_MAX_WIDTH + """; margin: 1rem auto; padding: 0 1rem; }
h1 { margin: .25rem 0 1rem 0; }
.card-grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(220px,1fr)); gap: .75rem; }
.card { background:var(--card); border:1px solid var(--border); border-radius:.6rem; padding: .9rem; box-shadow:0 2px 12px rgba(0,0,0,.04); }
.card .metric { font-size:1.6rem; font-weight:700; margin-top:.25rem; }
.card .desc { color:var(--muted); font-size:.9rem; }
.toolbar { display:flex; flex-wrap:wrap; gap:.5rem; align-items:center; margin:.6rem 0 1rem; }
.toolbar input, .toolbar select { padding:.35rem .5rem; background:var(--card); color:var(--text); border:1px solid var(--border); border-radius:.35rem; }
.btn { padding:.4rem .6rem; border:none; background:var(--accent); color:#fff; border-radius:.35rem; cursor:pointer; text-decoration:none; display:inline-block; }
.btn.secondary { background:#6c757d; }
.btn.link { background:transparent; color:var(--accent); text-decoration:underline; }
.badge { padding:.12rem .5rem; border-radius:.5rem; color:#fff; font-weight:600; font-size:.85rem; }
.table-wrap { overflow:auto; border-radius:.6rem; border:1px solid var(--border); }
table { width:100%; border-collapse:collapse; background:var(--card); }
th, td { padding:10px 12px; border-bottom:1px solid var(--border); vertical-align:top; }
thead { position:sticky; top: calc(0.65rem + 40px); background:var(--card); z-index:5; }
tr:nth-child(even) td { background:rgba(0,0,0,.02); }
.no-data { padding:2rem; text-align:center; color:var(--muted); }
pre { background:#0c0f14; color:#e6e6e6; padding:.8rem; border-radius:.5rem; overflow:auto; }
.kv td { border:none; padding:.3rem .6rem; }
.meta { color:var(--muted); font-size:.9rem; }
.copy { cursor:pointer; margin-left:.35rem; font-size:.85rem; color:var(--accent); }
.row-expand { cursor:pointer; }
.small { font-size:.9rem; color:var(--muted); }
</style>
<script>
(function () {
  const saved = localStorage.getItem('ui-theme');
  if (saved) document.documentElement.setAttribute('data-theme', saved);
})();
function toggleTheme(){
  const root = document.documentElement;
  const cur = root.getAttribute('data-theme') || 'light';
  const next = (cur === 'light') ? 'dark' : 'light';
  root.setAttribute('data-theme', next);
  localStorage.setItem('ui-theme', next);
}
function copyText(txt){
  navigator.clipboard.writeText(txt).then(()=>{});
}
function toggleRow(id){
  const el = document.getElementById(id);
  if(!el) return;
  el.style.display = (el.style.display === 'none' || !el.style.display) ? 'table-row' : 'none';
}
</script>
</head>
<body>
<nav>
  <a href="{{ url_for('dashboard') }}" class="{{ 'active' if active=='dash' else '' }}">Dashboard</a>
  <a href="{{ url_for('view_command_log') }}" class="{{ 'active' if active=='cmdlog' else '' }}">Command Log</a>
  <a href="{{ url_for('index') }}" class="{{ 'active' if active=='usage' else '' }}">Usage</a>
  <a href="{{ url_for('view_tasks') }}" class="{{ 'active' if active=='tasks' else '' }}">Tasks</a>
  <a href="{{ url_for('view_keys') }}" class="{{ 'active' if active=='keys' else '' }}">Keys</a>
  <a href="{{ url_for('view_interactions') }}" class="{{ 'active' if active=='interactions' else '' }}">Interactions</a>
  <a href="{{ url_for('view_gemma_logs') }}" class="{{ 'active' if active=='logs' else '' }}">Logs</a>
  <div class="nav-right">
    <a class="btn secondary" href="?refresh={{ 0 if refresh_seconds else 5 }}">{{ 'Stop Auto-Refresh' if refresh_seconds else 'Auto-Refresh 5s' }}</a>
    <a class="btn secondary" onclick="toggleTheme()">ðŸŒ“ Theme</a>
  </div>
</nav>
<div class="container">
  <h1>{{ title }}</h1>
  {% if toolbar %}{{ toolbar|safe }}{% endif %}
  {% if top %}
    <div class="card-grid">{{ top|safe }}</div>
  {% endif %}
  {% if error %}
    <div class="no-data">Error: {{ error }}</div>
  {% elif table %}
    <div class="table-wrap">{{ table|safe }}</div>
  {% else %}
    <div class="no-data">No entries found.</div>
  {% endif %}
</div>
</body>
</html>
"""

def render_page(title, active, table_html=None, toolbar_html=None, top_html=None, error=None, refresh=None):
    return render_template_string(
        HTML_BASE,
        title=title, active=active,
        table=table_html, toolbar=toolbar_html, top=top_html,
        error=error, refresh_seconds=refresh
    )

# --- Dashboard (last 24h insights) ---
@app.route('/')
@app.route('/dashboard')
def dashboard():
    refresh = request.args.get('refresh', type=int)
    error = None
    top_html = ""
    table_html = ""

    conn = get_db_connection()
    if not conn:
        return render_page("Dashboard", "dash", error="DB connect failed", refresh=refresh)

    try:
        with conn.cursor() as cur:
            # Time window
            cur.execute("SELECT NOW() AT TIME ZONE 'UTC'")
            now_utc = cur.fetchone()[0]
            # commands last 24h
            cur.execute("""
                SELECT
                  COUNT(*) AS total,
                  SUM(CASE WHEN co.success IS TRUE THEN 1 ELSE 0 END) AS success_cnt,
                  SUM(CASE WHEN co.success IS FALSE THEN 1 ELSE 0 END) AS fail_cnt,
                  ROUND(AVG(EXTRACT(EPOCH FROM (cl.command_end_timestamp - cl.command_start_timestamp)))::numeric, 2) AS avg_sec,
                  PERCENTILE_CONT(0.5) WITHIN GROUP (
                    ORDER BY EXTRACT(EPOCH FROM (cl.command_end_timestamp - cl.command_start_timestamp))
                  ) AS p50_sec
                FROM command_log cl
                LEFT JOIN command_output co ON co.command_id = cl.id
                WHERE cl.command_start_timestamp >= NOW() - INTERVAL '24 hours'
                  AND cl.command_end_timestamp IS NOT NULL
            """)
            total, success_cnt, fail_cnt, avg_sec, p50_sec = cur.fetchone()
            success_rate = (float(success_cnt or 0) / total * 100.0) if total else 0.0

            # usage tokens last 24h
            try:
                cur.execute("""
                    SELECT
                      COUNT(*) AS requests,
                      COALESCE(SUM(token_count),0) AS tokens
                    FROM usage_log
                    WHERE request_timestamp >= NOW() - INTERVAL '24 hours'
                """)
                req_24h, tokens_24h = cur.fetchone()
            except Exception:
                req_24h, tokens_24h = None, None

            # Top commands (by count) in last 24h
            cur.execute("""
                SELECT cl.command, COUNT(*) c
                FROM command_log cl
                WHERE cl.command_start_timestamp >= NOW() - INTERVAL '24 hours'
                  AND COALESCE(NULLIF(TRIM(cl.command), ''), '') <> ''
                GROUP BY cl.command
                ORDER BY c DESC
                LIMIT 5
            """)
            top_cmds = cur.fetchall()

            # Recent failures (10)
            cur.execute("""
                SELECT cl.id, cl.command, cl.permissions, co.return_code,
                       COALESCE(cl.executed_at, cl.command_start_timestamp) AS ts
                FROM command_log cl
                LEFT JOIN command_output co ON co.command_id = cl.id
                WHERE co.success IS FALSE
                ORDER BY ts DESC NULLS LAST
                LIMIT 10
            """)
            recent_fail = cur.fetchall()

            # Build cards
            cards = []
            cards.append(f'<div class="card"><div class="desc">Commands (24h)</div><div class="metric">{total or 0}</div></div>')
            cards.append(f'<div class="card"><div class="desc">Success Rate (24h)</div><div class="metric">{success_rate:.1f}%</div></div>')
            cards.append(f'<div class="card"><div class="desc">Median Duration</div><div class="metric">{(p50_sec or 0):.0f}s</div></div>')
            if req_24h is not None:
                cards.append(f'<div class="card"><div class="desc">Requests (24h)</div><div class="metric">{req_24h}</div></div>')
                cards.append(f'<div class="card"><div class="desc">Tokens (24h)</div><div class="metric">{tokens_24h}</div></div>')
            top_html = "".join(cards)

            # Build a small table: recent failures and top commands
            rows = []
            # Top commands
            rows.append('<tr><th colspan="4">Top Commands (24h)</th></tr>')
            if top_cmds:
                for cmd, cnt in top_cmds:
                    cmd_disp = (cmd or "").replace("<", "&lt;").replace(">", "&gt;")
                    rows.append(f"<tr><td colspan='3'><code>{cmd_disp}</code></td><td class='small'>{cnt}</td></tr>")
            else:
                rows.append("<tr><td colspan='4' class='small'>No command data.</td></tr>")
            # Failures
            rows.append('<tr><th colspan="4">Recent Failures</th></tr>')
            if recent_fail:
                for cid, cmd, perm, rc, ts in recent_fail:
                    ts_local = convert_to_local_time(ts)
                    cmd_disp = (cmd or "").replace("<", "&lt;").replace(">", "&gt;")
                    rows.append(
                        f"<tr>"
                        f"<td><a href='{url_for('command_detail', cmd_id=cid)}'>{cid}</a></td>"
                        f"<td><code>{cmd_disp}</code></td>"
                        f"<td class='small'>perm: {perm or 'â€”'} | rc: {rc if rc is not None else 'â€”'}</td>"
                        f"<td class='small'>{ts_local or 'â€”'}</td>"
                        f"</tr>"
                    )
            else:
                rows.append("<tr><td colspan='4' class='small'>No failures recorded.</td></tr>")

            table_html = f"<table><tbody>{''.join(rows)}</tbody></table>"

    except psycopg2.Error as e:
        error = f"DB error: {e}"
    finally:
        conn.close()

    return render_page("Dashboard", "dash", table_html=table_html, top_html=top_html, error=error, refresh=refresh)

# --- Usage (unchanged but centered) ---
@app.route('/usage')
def index():
    refresh = request.args.get('refresh', type=int)
    error, table_html = None, ""
    conn = get_db_connection()
    if not conn:
        return render_page("Database Usage Logs", "usage", error="DB connect failed", refresh=refresh)
    try:
        with conn.cursor() as cur:
            cur.execute("""SELECT id, key_name, task_id, request_timestamp, token_count, request_type
                           FROM usage_log ORDER BY request_timestamp DESC LIMIT 1000;""")
            headers = [d[0] for d in cur.description]
            rows_html = []
            for row in cur.fetchall():
                row = list(row)
                row[3] = convert_to_local_time(row[3])
                rows_html.append("<tr>" + "".join(f"<td>{(x if isinstance(x, (int,float)) else (str(x) or ''))}</td>" for x in row) + "</tr>")
            table_html = "<table><thead><tr>" + "".join(f"<th>{h}</th>" for h in headers) + "</tr></thead><tbody>" + "".join(rows_html) + "</tbody></table>"
    except psycopg2.Error as e:
        error = f"Database query failed: {e}"
    finally:
        conn.close()
    return render_page("Database Usage Logs", "usage", table_html=table_html, error=error, refresh=refresh)

# --- Tasks ---
@app.route('/tasks')
def view_tasks():
    refresh = request.args.get('refresh', type=int)
    error, table_html = None, ""
    conn = get_db_connection()
    if not conn:
        return render_page("Tasks", "tasks", error="DB connect failed", refresh=refresh)
    try:
        with conn.cursor() as cur:
            cur.execute("""SELECT id, status, last_updated, context FROM tasks ORDER BY last_updated DESC LIMIT 1000;""")
            headers = [d[0] for d in cur.description]
            rows_html = []
            for row in cur.fetchall():
                row = list(row)
                row[2] = convert_to_local_time(row[2])
                row[3] = f"<pre>{json.dumps(row[3], indent=2)}</pre>"
                rows_html.append("<tr>" + "".join(f"<td>{(x if isinstance(x,(int,float)) else (x or ''))}</td>" for x in row) + "</tr>")
            table_html = "<table><thead><tr>" + "".join(f"<th>{h}</th>" for h in headers) + "</tr></thead><tbody>" + "".join(rows_html) + "</tbody></table>"
    except psycopg2.Error as e:
        error = f"Database query failed: {e}"
    finally:
        conn.close()
    return render_page("Tasks", "tasks", table_html=table_html, error=error, refresh=refresh)

# --- Keys ---
@app.route('/keys')
def view_keys():
    refresh = request.args.get('refresh', type=int)
    error, table_html = None, ""
    conn = get_db_connection()
    if not conn:
        return render_page("API Key Status", "keys", error="DB connect failed", refresh=refresh)
    try:
        with conn.cursor() as cur:
            cur.execute("""SELECT key_name, daily_request_count, daily_token_total, last_used,
                                  quota_exhausted, disabled_until
                           FROM api_keys ORDER BY last_used DESC NULLS LAST;""")
            headers = [d[0] for d in cur.description]
            rows_html = []
            for row in cur.fetchall():
                row = list(row)
                row[3] = convert_to_local_time(row[3])
                row[5] = convert_to_local_time(row[5])
                row[4] = badge("exhausted", "#dc3545") if row[4] else badge("ok", "#28a745")
                rows_html.append("<tr>" + "".join(f"<td>{(x if isinstance(x,(int,float)) else (x or ''))}</td>" for x in row) + "</tr>")
            table_html = "<table><thead><tr>" + "".join(f"<th>{h}</th>" for h in headers) + "</tr></thead><tbody>" + "".join(rows_html) + "</tbody></table>"
    except psycopg2.Error as e:
        error = f"Database query failed: {e}"
    finally:
        conn.close()
    return render_page("API Key Status", "keys", table_html=table_html, error=error, refresh=refresh)

# --- Interactions ---
@app.route('/interactions')
def view_interactions():
    refresh = request.args.get('refresh', type=int)
    error, table_html = None, ""
    conn = get_db_connection()
    if not conn:
        return render_page("All Interactions", "interactions", error="DB connect failed", refresh=refresh)
    try:
        with conn.cursor() as cur:
            cur.execute("""SELECT id, task_id, prompt, response, request_timestamp
                           FROM interactions ORDER BY request_timestamp DESC LIMIT 1000;""")
            headers = [d[0] for d in cur.description]
            rows_html = []
            for row in cur.fetchall():
                row = list(row)
                row[4] = convert_to_local_time(row[4])
                row[2] = safe_pre(row[2]) if row[2] else ""
                row[3] = safe_pre(row[3]) if row[3] else ""
                rows_html.append("<tr>" + "".join(f"<td>{(x if isinstance(x,(int,float)) else (x or ''))}</td>" for x in row) + "</tr>")
            table_html = "<table><thead><tr>" + "".join(f"<th>{h}</th>" for h in headers) + "</tr></thead><tbody>" + "".join(rows_html) + "</tbody></table>"
    except psycopg2.Error as e:
        error = f"Database query failed: {e}"
    finally:
        conn.close()
    return render_page("All Interactions", "interactions", table_html=table_html, error=error, refresh=refresh)

# --- Command Log with filters, pagination, inline expand ---
@app.route('/command_log')
def view_command_log():
    # Pagination
    page = max(request.args.get('page', default=1, type=int), 1)
    page_size = max(min(request.args.get('page_size', default=50, type=int), 500), 1)
    offset = (page - 1) * page_size

    # Filters
    status = request.args.get('status')
    agent_mode = request.args.get('agent_mode')
    confirmed = request.args.get('confirmed')   # 'true'|'false'
    permissions = request.args.get('permissions')
    search = request.args.get('search')
    refresh = request.args.get('refresh', type=int)

    where, params = [], []
    if status:
        where.append("cl.status = %s"); params.append(status)
    if agent_mode:
        where.append("cl.agent_mode = %s"); params.append(agent_mode)
    if confirmed in ('true', 'false'):
        where.append("cl.user_confirmation = %s"); params.append(confirmed == 'true')
    if permissions:
        where.append("cl.permissions = %s"); params.append(permissions)
    if search:
        where.append("(cl.task_id ILIKE %s OR cl.command ILIKE %s OR cl.prompt ILIKE %s)")
        params.extend([f"%{search}%", f"%{search}%", f"%{search}%"])
    where_sql = ("WHERE " + " AND ".join(where)) if where else ""
    order_sql = "ORDER BY COALESCE(cl.executed_at, cl.command_start_timestamp) DESC NULLS LAST, cl.id DESC"

    error, table_html, toolbar_html = None, "", ""
    conn = get_db_connection()
    if not conn:
        return render_page("Command Log", "cmdlog", error="DB connect failed", refresh=refresh)

    try:
        with conn.cursor() as cur:
            # Count
            cur.execute(f"SELECT COUNT(*) FROM command_log cl {where_sql}", params)
            total = cur.fetchone()[0]

            # Page rows
            cur.execute(f"""
                SELECT
                    cl.id,
                    cl.task_id,
                    COALESCE(cl.executed_at, cl.command_start_timestamp) AS at,
                    cl.command,
                    cl.permissions,
                    cl.user_confirmation,
                    cl.agent_mode,
                    cl.status,
                    cl.command_start_timestamp,
                    cl.command_end_timestamp,
                    (EXTRACT(EPOCH FROM (cl.command_end_timestamp - cl.command_start_timestamp)))::INT AS duration_sec,
                    co.success,
                    co.return_code,
                    COALESCE(co.stdout,''),  -- full (we'll preview in UI)
                    COALESCE(co.stderr,''),
                    cl.prompt
                FROM command_log cl
                LEFT JOIN command_output co ON co.command_id = cl.id
                {where_sql}
                {order_sql}
                LIMIT %s OFFSET %s
            """, params + [page_size, offset])

            rows = cur.fetchall()

        # Toolbar
        def opt(val, cur): return 'selected' if val == cur else ''
        toolbar_html = f"""
        <form method="get" class="toolbar">
          <input type="text" name="search" placeholder="search task/command/prompt" value="{search or ''}">
          <select name="status">
            <option value="">status</option>
            <option value="queued"   {opt('queued', status)} >queued</option>
            <option value="running"  {opt('running', status)}>running</option>
            <option value="completed"{opt('completed', status)}>completed</option>
            <option value="failed"   {opt('failed', status)} >failed</option>
          </select>
          <select name="agent_mode">
            <option value="">agent mode</option>
            <option value="Interactive" {opt('Interactive', agent_mode)}>Interactive</option>
            <option value="Agentic"     {opt('Agentic', agent_mode)}    >Agentic</option>
            <option value="ReAct"       {opt('ReAct', agent_mode)}      >ReAct</option>
          </select>
          <select name="confirmed">
            <option value="">confirmed?</option>
            <option value="true"  {opt('true', confirmed)} >true</option>
            <option value="false" {opt('false', confirmed)}>false</option>
          </select>
          <input type="text" name="permissions" placeholder="permissions" value="{permissions or ''}">
          <input type="number" min="1" max="500" name="page_size" value="{page_size}">
          <input type="number" min="1" name="page" value="{page}">
          <input type="number" min="0" name="refresh" placeholder="autorefresh (s)" value="{refresh or ''}">
          <button class="btn" type="submit">Apply</button>
          <a class="btn secondary" href="{url_for('view_command_log')}">Reset</a>
          <a class="btn" href="{url_for('command_log_csv')}?{request.query_string.decode('utf-8')}">Download CSV</a>
        </form>
        <div class="meta">Total: {total} Â· Page {page}</div>
        """

        # Table
        header = ["id", "time", "command", "permissions", "confirmed", "agent", "status", "duration", "rc", "stdout/err", "task"]
        body_html = []

        for r in rows:
            (cid, task_id, at, command, perm, confirmed_b, agent, status, start_ts, end_ts,
             dur, success, rc, stdout, stderr, prompt) = r

            at = convert_to_local_time(at)
            dur_txt = (f"{dur}s" if dur is not None else "â€”")
            cmd_disp = (command or "").replace("<","&lt;").replace(">","&gt;")
            task_disp = (task_id or "â€”")
            # previews
            s_out = (stdout[:200] + ("â€¦" if len(stdout) > 200 else ""))
            s_err = (stderr[:200] + ("â€¦" if len(stderr) > 200 else ""))
            s_out = (s_out.replace("<","&lt;").replace(">","&gt;"))
            s_err = (s_err.replace("<","&lt;").replace(">","&gt;"))
            rowid = f"rowx-{cid}"

            body_html.append(
                "<tr class='row-expand' onclick=\"toggleRow('%s')\">" % rowid
                + f"<td><a href='{url_for('command_detail', cmd_id=cid)}' onclick='event.stopPropagation();'>{cid}</a></td>"
                + f"<td class='small'>{at or 'â€”'}</td>"
                + f"<td><code>{cmd_disp}</code> <span class='copy' onclick=\"event.stopPropagation();copyText('{command or ''}')\">copy</span></td>"
                + f"<td class='small'>{perm or 'â€”'}</td>"
                + f"<td class='small'>{bool_badge(confirmed_b)}</td>"
                + f"<td class='small'>{agent or 'â€”'}</td>"
                + f"<td class='small'>{status_badge(status)}</td>"
                + f"<td class='small'>{dur_txt}</td>"
                + f"<td class='small'>{rc if rc is not None else 'â€”'}</td>"
                + f"<td class='small'>{('<pre>'+s_out+'</pre>' if s_out else '')}{('<pre>'+s_err+'</pre>' if s_err else '')}</td>"
                + f"<td class='small'>{task_disp}</td>"
                + "</tr>"
                + f"<tr id='{rowid}' style='display:none;'>"
                + f"<td colspan='11'>"
                + f"<div class='meta'><strong>Prompt:</strong> { (prompt or '').replace('<','&lt;').replace('>','&gt;') }</div>"
                + f"<h4>STDOUT</h4>{safe_pre(stdout)}"
                + f"<h4>STDERR</h4>{safe_pre(stderr)}"
                + "</td></tr>"
            )

        table_html = "<table><thead><tr>" + "".join(f"<th>{h}</th>" for h in header) + "</tr></thead><tbody>" + "".join(body_html) + "</tbody></table>"

    except psycopg2.Error as e:
        error = f"Database query failed: {e}"
    finally:
        conn.close()

    return render_page("Command Log", "cmdlog", table_html=table_html, toolbar_html=toolbar_html, refresh=refresh)

# --- CSV export (mirrors filters) ---
@app.route('/command_log.csv')
def command_log_csv():
    status = request.args.get('status')
    agent_mode = request.args.get('agent_mode')
    confirmed = request.args.get('confirmed')
    permissions = request.args.get('permissions')
    search = request.args.get('search')

    where, params = [], []
    if status:
        where.append("cl.status = %s"); params.append(status)
    if agent_mode:
        where.append("cl.agent_mode = %s"); params.append(agent_mode)
    if confirmed in ('true', 'false'):
        where.append("cl.user_confirmation = %s"); params.append(confirmed == 'true')
    if permissions:
        where.append("cl.permissions = %s"); params.append(permissions)
    if search:
        where.append("(cl.task_id ILIKE %s OR cl.command ILIKE %s OR cl.prompt ILIKE %s)")
        params.extend([f"%{search}%", f"%{search}%", f"%{search}%"])
    where_sql = ("WHERE " + " AND ".join(where)) if where else ""
    order_sql = "ORDER BY COALESCE(cl.executed_at, cl.command_start_timestamp) DESC NULLS LAST, cl.id DESC"

    conn = get_db_connection()
    if not conn:
        return Response("DB connect failed", status=500)

    try:
        with conn.cursor() as cur:
            cur.execute(f"""
                SELECT
                    cl.id, cl.task_id, COALESCE(cl.executed_at, cl.command_start_timestamp) AS at,
                    cl.command, cl.permissions, cl.user_confirmation, cl.agent_mode, cl.status,
                    cl.command_start_timestamp, cl.command_end_timestamp,
                    (EXTRACT(EPOCH FROM (cl.command_end_timestamp - cl.command_start_timestamp)))::INT AS duration_sec,
                    co.success, co.return_code, co.stdout, co.stderr, cl.prompt
                FROM command_log cl
                LEFT JOIN command_output co ON co.command_id = cl.id
                {where_sql}
                {order_sql}
                LIMIT 5000
            """, params)
            headers = [d[0] for d in cur.description]
            buf = StringIO()
            w = csv.writer(buf)
            w.writerow(headers)
            for row in cur.fetchall():
                r = list(row)
                r[2] = convert_to_local_time(r[2])
                r[8] = convert_to_local_time(r[8])
                r[9] = convert_to_local_time(r[9])
                w.writerow(r)
    finally:
        conn.close()

    return Response(buf.getvalue(), mimetype='text/csv',
                    headers={"Content-Disposition": "attachment; filename=command_log.csv"})

# --- Command detail ---
@app.route('/command/<int:cmd_id>')
def command_detail(cmd_id):
    refresh = request.args.get('refresh', type=int)
    error = None
    table_html = ""
    conn = get_db_connection()
    if not conn:
        return render_page(f"Command {cmd_id}", "cmdlog", error="DB connect failed", refresh=refresh)
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT
                    cl.id, cl.task_id, cl.prompt, cl.command, cl.permissions, cl.user_confirmation,
                    cl.agent_mode, cl.status, cl.executed_at, cl.command_start_timestamp,
                    cl.command_end_timestamp, (EXTRACT(EPOCH FROM (cl.command_end_timestamp - cl.command_start_timestamp)))::INT AS duration_sec,
                    cl.thought, cl.observation, cl.parent_command_id,
                    co.success, co.return_code, co.stdout, co.stderr
                FROM command_log cl
                LEFT JOIN command_output co ON co.command_id = cl.id
                WHERE cl.id = %s
            """, (cmd_id,))
            row = cur.fetchone()
            if not row:
                return render_page(f"Command {cmd_id}", "cmdlog", error="Not found", refresh=refresh)

        (rid, task_id, prompt, command, permissions, confirmed, agent_mode, status,
         executed_at, start_ts, end_ts, duration_sec, thought, observation, parent_id,
         success, return_code, stdout, stderr) = row

        meta_rows = [
            ("id", rid),
            ("task_id", task_id),
            ("permissions", permissions),
            ("confirmed", bool_badge(confirmed)),
            ("agent_mode", agent_mode or "â€”"),
            ("status", status_badge(status)),
            ("return_code", return_code if return_code is not None else "â€”"),
            ("success", bool_badge(success) if success is not None else "â€”"),
            ("executed_at", convert_to_local_time(executed_at) if executed_at else "â€”"),
            ("start", convert_to_local_time(start_ts) if start_ts else "â€”"),
            ("end", convert_to_local_time(end_ts) if end_ts else "â€”"),
            ("duration_sec", duration_sec if duration_sec is not None else "â€”"),
            ("parent_command_id", parent_id if parent_id is not None else "â€”"),
        ]
        kv = "<table class='kv'>" + "".join(f"<tr><td class='meta'>{k}</td><td>{v}</td></tr>" for k,v in meta_rows) + "</table>"

        html = f"""
        <div class="card">{kv}</div>
        <div class="card">
          <h3>Prompt <span class="copy" onclick="copyText({json.dumps(prompt or '')})">copy</span></h3>
          {safe_pre(prompt or '')}
          <h3>Command <span class="copy" onclick="copyText({json.dumps(command or '')})">copy</span></h3>
          {safe_pre(command or '')}
          <h3>Thought</h3>
          {safe_pre(thought or 'â€”')}
          <h3>Observation</h3>
          {safe_pre(observation or 'â€”')}
          <h3>STDOUT <span class="copy" onclick="copyText({json.dumps(stdout or '')})">copy</span></h3>
          {safe_pre(stdout or '')}
          <h3>STDERR <span class="copy" onclick="copyText({json.dumps(stderr or '')})">copy</span></h3>
          {safe_pre(stderr or '')}
        </div>
        """
        table_html = html

    except psycopg2.Error as e:
        error = f"DB error: {e}"
    finally:
        conn.close()

    return render_page(f"Command {cmd_id}", "cmdlog", table_html=table_html, error=error, refresh=refresh)

# --- Logs Browser ---
@app.route('/gemma_logs', defaults={'filename': None})
@app.route('/gemma_logs/<path:filename>')
def view_gemma_logs(filename):
    if filename:
        if not os.path.isdir(LOGS_DIR):
            return "Log directory not found.", 404
        return send_from_directory(LOGS_DIR, filename)
    files = []
    if os.path.isdir(LOGS_DIR):
        files = [f for f in os.listdir(LOGS_DIR) if os.path.isfile(os.path.join(LOGS_DIR, f))]
        files.sort(reverse=True)
    items = "".join(f'<li><a href="{url_for("view_gemma_logs", filename=f)}">{f}</a></li>' for f in files) or "<li>No log files found.</li>"
    table_html = f"<div class='card'><ul>{items}</ul></div>"
    return render_page("Gemma Logs", "logs", table_html=table_html)

# --- Health ---
@app.route('/healthz')
def health():
    return Response("ok", 200)

if __name__ == '__main__':
    port = int(os.getenv('WEB_UI_PORT', '5002'))
    debug = os.getenv('WEB_UI_DEBUG', '0') == '1'
    app.run(host='0.0.0.0', port=port, debug=debug, use_reloader=False)
